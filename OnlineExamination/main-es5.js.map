{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/admin-dashboard/admin-dashboard.component.ts","webpack:///src/app/admin-dashboard/admin-dashboard.component.html","webpack:///src/app/admin-dashboard/assign-students-dialog/assign-students-dialog.component.ts","webpack:///src/app/admin-dashboard/assign-students-dialog/assign-students-dialog.component.html","webpack:///src/app/admin-dashboard/view-questions/view-questions.component.ts","webpack:///src/app/admin-dashboard/view-questions/view-questions.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/common-service.service.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/signup/signup.component.ts","webpack:///src/app/signup/signup.component.html","webpack:///src/app/spinner/spinner.component.ts","webpack:///src/app/spinner/spinner.component.html","webpack:///src/app/student-dashboard/student-dashboard.component.ts","webpack:///src/app/student-dashboard/student-dashboard.component.html","webpack:///src/app/student-dashboard/test-component/test-component.component.ts","webpack:///src/app/student-dashboard/test-component/test-component.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AdminDashboardComponent","route","commonServiceService","router","dialog","displayedColumns","getUserSession","logIn","subscribe","data","RoleId","userDetails","getAllTests","testId","Number","snapshot","paramMap","get","navigate","CustId","GetTests","dataSource","event","open","width","DialogType","dialogRef","height","afterClosed","TestId","DeleteTests","res","queryParams","TestName","testName","addTest","selector","templateUrl","styleUrls","AssignStudentsDialogComponent","userSession","JSON","parse","localStorage","getItem","questionsList","addStuBtn","noStudenAssign","addTestform","required","duration","passPercentage","addTestQuestions","Question","ChoiceAnswer1","ChoiceAnswer2","ChoiceAnswer3","ChoiceAnswer4","correctChoice","dialogType","GetAssignedStudentDetails","getStudentetails","valid","simTest","value","Duration","NoOfQuestions","PassPercentage","close","GetStudentDetails","newStudentslist","selectedStudentList","ChoiceAnswerList","choiceList","i","vl","ChoiceAnswer","CorrectChoice","correctChiceSelect","questionList","Choices","push","addQuestionsToList","reset","AddQuestions","custId","find","x","isChecked","checked","Ids","filter","map","length","toString","join","AssignStudents","ViewQuestionsComponent","AlphabetCollection","GetTestPapersAdmin","testPapers","questionsLengthExists","routes","path","component","pathMatch","AppRoutingModule","forRoot","imports","AppComponent","title","sessonAvailable","isVisibleSource","isVisible","setItem","AppModule","declarations","providers","bootstrap","entryComponents","httpOptions","headers","CommonServiceService","httpClient","apiEndPoint","ApiPreLik","post","email","password","providedIn","LoginComponent","showSpinner","invalidCred","logInBtnVisible","formLogin","EmailId","pwd","stringify","next","roleId","login","SignupComponent","emailExist","signUpbtn","mobNumberPattern","formSignUp","firstName","lastName","number","pattern","CustomerAccounts","FirstName","LastName","Pwd","Role","Phone","CustomerAccountsSignUp","signUpUser","signUp","SpinnerComponent","StudentDashboardComponent","getTestDetails","GetAllUserTests","assignedTests","TestComponentComponent","selectedAnsers","testContent","submitDisable","getTestQuestions","startTimer","GetTestQuestions","timeLeft","interval","setInterval","testTimeLeft","getTimeInTimer","testSubmit","d","h","Math","floor","m","s","hDisplay","mDisplay","sDisplay","choiceObj","item","questionId","index","indexOf","splice","nullItem","choices","choiceAnswer","choiceId","finalChoices","GenerateTestResult","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\nimport { CommonServiceService } from '../common-service.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AssignStudentsDialogComponent } from './assign-students-dialog/assign-students-dialog.component';\n\n@Component({\n  selector: 'app-admin-dashboard',\n  templateUrl: './admin-dashboard.component.html',\n  styleUrls: ['./admin-dashboard.component.css']\n})\nexport class AdminDashboardComponent implements OnInit {\n  displayedColumns: string[] = ['testId', 'testName', 'noOfQuestions', 'AddQuestions', 'AddStudents', 'ShowStudents', 'ViewQuestions', 'Delete'];\n  dataSource;\n  userSession;\n\n  constructor(private route: ActivatedRoute, private commonServiceService: CommonServiceService, private router: Router, private dialog: MatDialog) { }\n  userDetails: any;\n  testId: number;\n\n  ngOnInit(): void {\n    if (this.commonServiceService.getUserSession() != null) {\n      this.commonServiceService.logIn('admin', 'admin').subscribe(data => {\n        if (data) {\n          if (data.RoleId == 1) {\n            this.userDetails = data;\n          }\n        }\n      });\n      this.getAllTests(1);\n      this.testId = Number(this.route.snapshot.paramMap.get('id'));\n    } else {\n      this.router.navigate(['']);\n    }\n  }\n\n  getAllTests(CustId: number) {\n    this.commonServiceService.GetTests(CustId).subscribe(data => {\n      if (data) {\n        this.dataSource = data;\n      }\n    })\n  }\n\n  addStudentClick(event) {\n    this.dialog.open(AssignStudentsDialogComponent,\n      {\n        width: '300px',\n        data: {\n          testId: event.testId,\n          DialogType: 'AddAssignStudents'\n        }\n      });\n  }\n\n  AssignedStudents(event) {\n    this.dialog.open(AssignStudentsDialogComponent,\n      {\n        width: '450px',\n        data: {\n          testId: event.testId,\n          DialogType: 'GetAssignStudents'\n        }\n      });\n  }\n\n  addTest() {\n    const dialogRef = this.dialog.open(AssignStudentsDialogComponent,\n      {\n        width: '500px',\n        height: '400px',\n        data: {\n          DialogType: 'AddTest'\n        }\n      });\n    dialogRef.afterClosed().subscribe(data =>\n      this.getAllTests(1)\n    );\n  }\n\n  addQuestions(event) {\n    const dialogRef = this.dialog.open(AssignStudentsDialogComponent,\n      {\n        width: '80%',\n        height: '70%',\n        data: {\n          testId: event.testId,\n          DialogType: 'AddQuestion'\n        }\n      });\n    dialogRef.afterClosed().subscribe(data =>\n      this.getAllTests(1)\n    );\n  }\n\n  deleteTest(TestId) {\n    this.commonServiceService.DeleteTests(TestId).subscribe(res => {\n      if (res) {\n        this.getAllTests(1)\n      }\n    })\n  }\n\n  viewTestsQuestions(event) {\n    this.router.navigate(['/adminViewQuestions'], { queryParams: { TestId: event.testId, TestName: event.testName } });\n  }\n\n}\n","<div class=\"btnAddTest\"><button mat-raised-button color=\"primary\" (click)=\"addTest()\">Add Test</button></div>\n<table *ngIf=\"dataSource != 0  else noTestBlock\" mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n\n    <!-- S.No Column -->\n    <ng-container matColumnDef=\"testId\">\n        <th mat-header-cell *matHeaderCellDef> S.no </th>\n        <td mat-cell *matCellDef=\"let element; let i = index;\"> {{i+1}} </td>\n    </ng-container>\n\n    <!-- Test Name Column -->\n    <ng-container matColumnDef=\"testName\">\n        <th mat-header-cell *matHeaderCellDef> Test Name </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.testName}} </td>\n    </ng-container>\n\n    <!-- No of Questions Column -->\n    <ng-container matColumnDef=\"noOfQuestions\">\n        <th mat-header-cell *matHeaderCellDef> No of Questions </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.noOfQuestions}} </td>\n    </ng-container>\n\n    <!-- Add Questions Column -->\n    <ng-container matColumnDef=\"AddQuestions\">\n        <th mat-header-cell *matHeaderCellDef> Add Questions </th>\n        <td mat-cell *matCellDef=\"let element\" class=\"clickable\"><a (click)=\"addQuestions(element)\">Add Questions</a> </td>\n    </ng-container>\n\n    <!-- Assigned Students Column -->\n    <ng-container matColumnDef=\"ShowStudents\">\n        <th mat-header-cell *matHeaderCellDef> Assigned Students </th>\n        <td mat-cell *matCellDef=\"let element\" class=\"clickable\"><a (click)=\"addStudentClick(element)\">Assign Students</a>\n        </td>\n    </ng-container>\n\n    <!-- Show Students Column -->\n    <ng-container matColumnDef=\"AddStudents\">\n        <th mat-header-cell *matHeaderCellDef> Show Students </th>\n        <td mat-cell *matCellDef=\"let element\" class=\"clickable\"><a (click)=\"AssignedStudents(element)\">Show Students</a>\n        </td>\n    </ng-container>\n\n    <!-- View Questions Column -->\n    <ng-container matColumnDef=\"ViewQuestions\">\n        <th mat-header-cell *matHeaderCellDef> View Questions </th>\n        <td mat-cell *matCellDef=\"let element\" class=\"clickable\" (click)=\"viewTestsQuestions(element)\"><a>View Questions</a>\n        </td>\n    </ng-container>\n\n    <!-- Delete Test Column -->\n    <ng-container matColumnDef=\"Delete\">\n        <th mat-header-cell *matHeaderCellDef> Delete Test </th>\n        <td mat-cell *matCellDef=\"let element\" class=\"clickable\" (click)=\"deleteTest(element.testId)\"><a>Delete</a> </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>\n<ng-template #noTestBlock>\n    <div class=\"noTestCLS\">\n        <h2>No Tests Available</h2>\n    </div>\n</ng-template>","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { SimTest, selectedListModel, AddQuestions, AddChoices } from 'src/app/Models/CommonModels';\nimport { CommonServiceService } from 'src/app/common-service.service';\n\n@Component({\n  selector: 'app-assign-students-dialog',\n  templateUrl: './assign-students-dialog.component.html',\n  styleUrls: ['./assign-students-dialog.component.css']\n})\nexport class AssignStudentsDialogComponent implements OnInit {\n  displayedColumns: string[] = ['sNo','firstName','emailId'];\n  dialogType: string;\n  userSession = JSON.parse(localStorage.getItem('userSession'));\n  newStudentslist: selectedListModel[];\n  selectedStudentList: selectedListModel[];\n  checkedIDs;\n  questionsList: AddQuestions[] =[];\n  choice;\n  correctChiceSelect;\n  testId: number;\n  addStuBtn= true;\n  noStudenAssign = false;\n  constructor(private commonServiceService: CommonServiceService, public dialogRef: MatDialogRef<AssignStudentsDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) { }\n\n  addTestform : FormGroup = new FormGroup ({\n    testName: new FormControl('', [Validators.required]),\n    duration: new FormControl('', [Validators.required]),\n    passPercentage: new FormControl('', [Validators.required])\n  });\n\n  addTestQuestions : FormGroup = new FormGroup ({\n    Question: new FormControl('', [Validators.required]),\n    ChoiceAnswer1: new FormControl('', [Validators.required]),\n    ChoiceAnswer2: new FormControl('', [Validators.required]),\n    ChoiceAnswer3: new FormControl('', [Validators.required]),\n    ChoiceAnswer4: new FormControl('', [Validators.required]),\n    correctChoice: new FormControl('', [Validators.required])\n  });\n  ngOnInit(): void {\n    this.dialogType = this.data.DialogType;\n    if(this.dialogType == 'GetAssignStudents') {\n      this.testId = this.data.testId;\n      this.GetAssignedStudentDetails();\n    }\n    if(this.dialogType == 'AddAssignStudents') {\n      this.testId = this.data.testId;\n      this.getStudentetails();\n    }\n    if(this.dialogType == \"AddQuestion\")  {\n      this.testId = this.data.testId;\n    }\n  }\n\n  addTestSubmit() {\n    if(this.addTestform.valid) {\n      let simTest: SimTest = {\n        TestId : 0,\n        TestName : this.addTestform.value.testName,\n        Duration : this.addTestform.value.duration,\n        NoOfQuestions : 0,\n        PassPercentage : this.addTestform.value.passPercentage,\n        CustId: 1\n      }\n      this.commonServiceService.addTest(simTest).subscribe(data=>{\n        if(data) {\n          this.dialogRef.close();\n        }\n      })\n\n    }\n  }\n\n  getStudentetails(){\n    this.commonServiceService.GetStudentDetails(this.testId).subscribe(data=>{\n      if(data) {\n        this.newStudentslist = data;\n      }\n    });\n  }\n\n  GetAssignedStudentDetails() {\n    this.commonServiceService.GetAssignedStudentDetails(this.testId).subscribe(data=>{\n      if(data) {\n        this.selectedStudentList = data;\n      }\n    });\n  }\n\n  addQuestionsToList() {\n    if(this.addTestQuestions.valid) {\n      let ChoiceAnswerList = [];\n      ChoiceAnswerList[0] = this.addTestQuestions.value.ChoiceAnswer1;\n      ChoiceAnswerList[1] = this.addTestQuestions.value.ChoiceAnswer2;\n      ChoiceAnswerList[2] = this.addTestQuestions.value.ChoiceAnswer3;\n      ChoiceAnswerList[3] = this.addTestQuestions.value.ChoiceAnswer4;\n      let choiceList : AddChoices[] = [];\n      for(let i=0; i<4 ; i++) {\n        let vl = 'ChoiceAnswer'+i;\n        choiceList[i] = {\n          ChoiceAnswer: ChoiceAnswerList[i],\n          CorrectChoice: this.correctChiceSelect == (i+1) ? true: false\n        }\n      }\n      let questionList: AddQuestions = {\n        TestId : this.testId,\n        Question: this.addTestQuestions.value.Question,\n        Choices: choiceList\n      };\n      this.questionsList.push(questionList);\n    }\n  }\n\n  saveAndNext() {\n    if(this.addTestQuestions.valid) {\n    this.addQuestionsToList();\n    this.addTestQuestions.reset();\n    }\n  }\n\n  saveAndSubmit() {\n    this.addQuestionsToList(); \n    this.commonServiceService.AddQuestions(this.questionsList).subscribe(data=>{\n      if(data) {\n        this.dialogRef.close();\n      }\n    })\n  }\n\n  studentChecked(event: any, custId:number) {\n    this.newStudentslist.find(x=>x.custId==custId).isChecked = event.checked;\n  }\n\n  AssignStudents() {\n    let Ids = this.newStudentslist.filter(x=>x.isChecked == true).map(x=>x.custId);\n    if(Ids.length>0){\n      this.addStuBtn = false;\n      let data:string[] = [];\n      data.push(this.testId.toString());\n      data.push(Ids.join(','));\n        this.commonServiceService.AssignStudents(data).subscribe(data=>{\n          this.dialogRef.close();\n        })\n      } else {\n        this.noStudenAssign = true;\n      }\n  }\n\n  // changeSelection() {\n  //   this.fetchSelectedItems()\n  // }\n\n  // fetchSelectedItems() {\n  //   this.selectedStudentList = this.newStudentslist.filter((value, index) => {\n  //     return value.isChecked\n  //   });\n  // }\n\n  // fetchCheckedIDs() {\n  //   this.checkedIDs  = []\n  //   this.newStudentslist.forEach((value, index) => {\n  //     if (value.isChecked) {\n  //       this.checkedIDs.push(value.custId);\n  //     }\n  //   });\n  // }\n\n}\n","<!-- Assign Student Starts -->\n<div *ngIf=\"dialogType === 'AddAssignStudents'\">\n    <h1 mat-dialog-title>Assign Students</h1>\n    <div *ngFor=\"let stu of newStudentslist\">\n        <label>\n    <mat-checkbox [value]=\"stu.custId\" (change)=\"studentChecked($event, stu.custId)\">\n      {{stu.firstName}}\n    </mat-checkbox>\n  </label>\n    </div>\n    <mat-error *ngIf=\"noStudenAssign\">No Students Selected</mat-error>\n    <div class=\"button\" style=\"display: flex; justify-content: flex-end;\">\n        <button mat-button mat-dialog-close>Close</button>\n        <div style=\"width: 10px;\"></div>\n        <button mat-raised-button color=\"primary\" (click)=\"AssignStudents()\" [disabled]=\"!addStuBtn\">Add</button>\n    </div>\n\n</div>\n<!-- Assign Student Ends -->\n\n<!-- View Assigned Students Starts-->\n<div *ngIf=\"dialogType === 'GetAssignStudents'\">\n    <table mat-table [dataSource]=\"selectedStudentList\" class=\"mat-elevation-z8\">\n        <ng-container matColumnDef=\"sNo\">\n            <th mat-header-cell *matHeaderCellDef> S.no </th>\n            <td mat-cell *matCellDef=\"let element; let i = index;\"> {{i+1}} </td>\n        </ng-container>\n        <ng-container matColumnDef=\"firstName\">\n            <th mat-header-cell *matHeaderCellDef> Name </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.firstName}} </td>\n        </ng-container>\n        <ng-container matColumnDef=\"emailId\">\n            <th mat-header-cell *matHeaderCellDef> Email </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.emailId}} </td>\n        </ng-container>\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n    <div class=\"button\" style=\"display: flex; justify-content: flex-end;\">\n        <button mat-button mat-dialog-close>Close</button>\n    </div>\n</div>\n<!-- View Assigned Students Ends-->\n\n<!-- Add Test Starts-->\n<div *ngIf=\"dialogType === 'AddTest'\">\n    <h1 mat-dialog-title>Add Test</h1>\n    <form [formGroup]=\"addTestform\" (ngSubmit)=\"addTestSubmit()\">\n        <p>\n            <mat-form-field>\n                <input type=\"text\" matInput placeholder=\"Test Name\" formControlName=\"testName\" required>\n            </mat-form-field>\n        </p>\n        <p>\n            <mat-form-field>\n                <input type=\"number\" matInput placeholder=\"Duration in Minutes\" formControlName=\"duration\" required>\n            </mat-form-field>\n        </p>\n        <p>\n            <mat-form-field>\n                <input type=\"number\" matInput placeholder=\"Pass Percentage\" formControlName=\"passPercentage\" required>\n            </mat-form-field>\n        </p>\n        <div class=\"button\" style=\"display: flex; justify-content: flex-end;\">\n            <button mat-button mat-dialog-close>Close</button>\n            <div style=\"width: 10px;\"></div>\n            <button mat-raised-button color=\"primary\" type=\"submit\">Submit</button>\n        </div>\n    </form>\n</div>\n<!-- Add Test Ends-->\n\n<!-- Add Questions Starts -->\n<div *ngIf=\"dialogType === 'AddQuestion'\">\n    <form [formGroup]=\"addTestQuestions\">\n        <p>\n            <mat-form-field class=\"addQueInput\" required>\n                <input type=\"text\" matInput placeholder=\"Question\" formControlName=\"Question\" required>\n            </mat-form-field>\n        </p>\n        <p>\n            <mat-form-field class=\"addQueInput\">\n                <input type=\"text\" matInput placeholder=\"Choice Answer\" formControlName=\"ChoiceAnswer1\" required>\n            </mat-form-field>\n        </p>\n        <p>\n            <mat-form-field class=\"addQueInput\">\n                <input type=\"text\" matInput placeholder=\"Choice Answer\" formControlName=\"ChoiceAnswer2\" required>\n            </mat-form-field>\n        </p>\n        <p>\n            <mat-form-field class=\"addQueInput\">\n                <input type=\"text\" matInput placeholder=\"Choice Answer\" formControlName=\"ChoiceAnswer3\" required>\n            </mat-form-field>\n        </p>\n        <p>\n            <mat-form-field class=\"addQueInput\">\n                <input type=\"text\" matInput placeholder=\"Choice Answer\" formControlName=\"ChoiceAnswer4\" required>\n            </mat-form-field>\n        </p>\n        <P>\n            <mat-form-field appearance=\"fill\">\n                <mat-label>Correct Option</mat-label>\n                <mat-select [(value)]=\"correctChiceSelect\" formControlName=\"correctChoice\" required>\n                    <mat-option>None</mat-option>\n                    <mat-option value=1>1</mat-option>\n                    <mat-option value=2>2</mat-option>\n                    <mat-option value=3>3</mat-option>\n                    <mat-option value=4>4</mat-option>\n                </mat-select>\n            </mat-form-field>\n        </P>\n        <div class=\"button\" style=\"display: flex; justify-content: flex-end;\">\n            <button mat-button mat-dialog-close>Close</button>\n            <div style=\"width: 10px;\"></div>\n            <button mat-raised-button color=\"primary\" (click)=\"saveAndNext()\">Save and Next</button>\n            <div style=\"width: 10px;\"></div>\n            <button mat-raised-button color=\"primary\" (click)=\"saveAndSubmit()\">Save and Close</button>\n        </div>\n    </form>\n</div>\n<!-- Add Questions Ends -->","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { CommonServiceService } from 'src/app/common-service.service';\n\n@Component({\n  selector: 'app-view-questions',\n  templateUrl: './view-questions.component.html',\n  styleUrls: ['./view-questions.component.css']\n})\nexport class ViewQuestionsComponent implements OnInit, OnDestroy {\n  testPapers: any;\n  AlphabetCollection: string[] = ['a', 'b', 'c', 'd'];\n  TestId:Number;\n  TestName:string;\n  questionsLengthExists: boolean;\n  constructor(private commonServiceService: CommonServiceService, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(queryParams => {\n      this.TestId = Number(queryParams['TestId']);\n      this.TestName = queryParams['TestName'];\n    });\n    this.commonServiceService.GetTestPapersAdmin(this.TestId).subscribe(res => {\n      if(res){\n        this.testPapers = res;\n        this.questionsLengthExists = this.testPapers.length>0? true: false;\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.TestId = null;\n    this.TestName = null;\n  }\n}\n","<h1 style=\"display: flex; justify-content: center;\">{{TestName}} Test Questions</h1>\n<div *ngIf=\"questionsLengthExists else NoQuestions\">\n    <div style=\"display: flex; justify-content: flex-end; margin-right: 5%;\"><p style=\"font-weight:bold\">Note: </p> <p>Correct ansers are bolded</p></div>\n    <div *ngFor=\"let question of testPapers index as i\">\n         <p style=\"margin-left: 10%;\">{{i+1}}.  {{question.question}}</p>\n        <div *ngFor=\"let choice of question.choices index as j\">\n            <p style=\"margin-left: 13%;\" [ngStyle]=\"{'font-weight': choice.choiceId === question.correctId ? 'Bold': '100'}\">\n                {{AlphabetCollection[j]}}.  {{choice.choiceAnswer}}</p>\n        </div>\n        <br/>\n    </div>\n</div>\n<ng-template else #NoQuestions><h2 style=\"display: flex; justify-content: center; margin-top: 10%;\">No Questions Assigned</h2></ng-template>\n<div class=\"btnBack\"><button mat-raised-button color=\"primary\" routerLink=\"/adminDashBoard\" routerLinkActive=\"active\">Back</button></div>\n\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AdminDashboardComponent } from './admin-dashboard/admin-dashboard.component';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { StudentDashboardComponent } from './student-dashboard/student-dashboard.component';\nimport { ViewQuestionsComponent } from './admin-dashboard/view-questions/view-questions.component';\nimport { TestComponentComponent } from './student-dashboard/test-component/test-component.component';\n\n\nconst routes: Routes = [\n  {path: '', component: LoginComponent, pathMatch: 'full'},\n  {path: 'signUp', component: SignupComponent},\n  {path: 'adminDashBoard', component:  AdminDashboardComponent},\n  {path: 'studentDashBoard', component:  StudentDashboardComponent},\n  {path: 'adminViewQuestions', component:  ViewQuestionsComponent},\n  {path: 'testComponentComponent', component:  TestComponentComponent}\n  // {path: 'adminViewQuestions', component:  ViewQuestionsComponent, data : {some_data : 'some value'}}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CommonServiceService } from './common-service.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'OnlineExamination';\n  sessonAvailable: boolean = false;\n  // userSession: any = ( JSON.parse(localStorage.getItem('userSession')) == null ||  JSON.parse(localStorage.getItem('userSession')) == undefined) ? null  : JSON.parse(localStorage.getItem('userSession'));\n  // isSessionLogin =  this.userSession == null? 0: 1;\n  // firstName = this.isSessionLogin == 1 ? this.userSession.firstName: '';\n\n  constructor(private router: Router, private commonServiceService: CommonServiceService) {\n    commonServiceService.isVisibleSource.subscribe((isVisible: boolean) => {\n      this.sessonAvailable = isVisible;\n  });\n  }\n\n  ngOnInit(): void {\n    this.sessonAvailable = JSON.parse(localStorage.getItem('userSession')) != null ? true: false;\n  }\n\n  // sessionCheck() : any []{\n  //   // return ( JSON.parse(localStorage.getItem('userSession')) == null ||  JSON.parse(localStorage.getItem('userSession')) == undefined) ? null  : JSON.parse(localStorage.getItem('userSession'));\n  // }\n\n  logout() {\n    localStorage.setItem('userSession', null);\n    this.sessonAvailable = false;\n    this.router.navigate(['']);\n\n  }\n}\n","<mat-toolbar color=\"primary\">\r\n    <span class=\"titleName\">Online Examination</span>\r\n    <div _ngcontent-kte-c50=\"\" style=\"flex-grow: 1;\"></div>\r\n    <!-- <div *ngIf=\"isSessionLogin == 1\"> -->\r\n        \r\n        <button *ngIf=\"sessonAvailable\" class=\"signUp\" (click)=\"logout()\" mat-button>\r\n            <span class=\"iconify\" data-icon=\"mdi-logout\" data-inline=\"false\" ></span>LogOut</button>\r\n</mat-toolbar>\r\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { LoginComponent } from './login/login.component';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport { SpinnerComponent } from './spinner/spinner.component';\nimport { AdminDashboardComponent } from './admin-dashboard/admin-dashboard.component';\nimport {MatTableModule} from '@angular/material/table';\nimport { AssignStudentsDialogComponent } from './admin-dashboard/assign-students-dialog/assign-students-dialog.component';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport { SignupComponent } from './signup/signup.component';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport { StudentDashboardComponent } from './student-dashboard/student-dashboard.component';\nimport { ViewQuestionsComponent } from './admin-dashboard/view-questions/view-questions.component';\nimport { TestComponentComponent } from './student-dashboard/test-component/test-component.component';\nimport {MatSelectModule} from '@angular/material/select';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    SpinnerComponent,\n    AdminDashboardComponent,\n    AssignStudentsDialogComponent,\n    SignupComponent,\n    StudentDashboardComponent,\n    ViewQuestionsComponent,\n    TestComponentComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    MatButtonModule,\n    MatIconModule,\n    MatToolbarModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatInputModule,\n    BrowserAnimationsModule,\n    MatRadioModule,\n    MatProgressSpinnerModule,\n    MatTableModule,\n    MatDialogModule,\n    MatCheckboxModule,\n    MatSelectModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n  entryComponents: [\n    SpinnerComponent,\n    AssignStudentsDialogComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { CustomerAccountsModel } from './Models/CommonModels';\n\nconst httpOptions = {\n  headers: new HttpHeaders({'Content-Type':'application/json; charset=utf-8'})\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommonServiceService {\n\n  private apiEndPoint = environment.ApiPreLik;\n  isVisibleSource: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(private httpClient: HttpClient) { }\n\n  getUserSession(): Observable<boolean>{\n    return JSON.parse(localStorage.getItem('userSession'));\n  }\n\n  getCustomers(): Observable<any>{\n    return this.httpClient.get(this.apiEndPoint+'CustomerAccounts');\n  }\n\n  signUpUser(data): Observable<any>{\n    return this.httpClient.post(this.apiEndPoint+'CustomerAccounts/RegisterUser',data, httpOptions);\n  }\n\n  logIn(email: string, password: string):  Observable<any>{\n    return this.httpClient.get<CustomerAccountsModel>(this.apiEndPoint+'CustomerAccounts/Login/'+email+'/'+password);\n  }\n\n  addTest(data): Observable<any>{\n    return this.httpClient.post(this.apiEndPoint+'Admin/CreateTest',data,httpOptions);\n  }\n\n  GetTests(CustId): Observable<any>{\n    return this.httpClient.get<CustomerAccountsModel>(this.apiEndPoint+'Admin/GetTests/'+CustId);\n  }\n\n  DeleteTests(TestId): Observable<any>{\n    return this.httpClient.get<any>(this.apiEndPoint+'Admin/DeleteTests/'+TestId);\n  }\n\n  GetStudentDetails(TestId): Observable<any>{\n    return this.httpClient.get<any>(this.apiEndPoint+'Admin/GetStudentDetails/'+TestId);\n  }\n\n  GetAssignedStudentDetails(TestId): Observable<any>{\n    return this.httpClient.get<any>(this.apiEndPoint+'Admin/GetAssignedStudentDetails/'+TestId);\n  }\n\n  GetAllUserTests(custId: Number): Observable<any>{\n    return this.httpClient.get<any>(this.apiEndPoint+'Student/GetAllUserTests/'+custId);\n  }\n\n  GetTestPapersAdmin(TestId: Number): Observable<any>{\n    return this.httpClient.get<any>(this.apiEndPoint+'Admin/GetTestPapersAdmin/'+TestId);\n  }\n  \n  GetTestQuestions(TestId: Number): Observable<any>{\n    return this.httpClient.get<any>(this.apiEndPoint+'Student/GetTestQuestions/'+TestId);\n  }\n  \n  GenerateTestResult(data): Observable<any>{\n    return this.httpClient.post(this.apiEndPoint+'Student/GenerateTestResult',data,httpOptions);\n  }\n  \n  AddQuestions(data): Observable<any>{\n    return this.httpClient.post(this.apiEndPoint+'Admin/AddQuestions',data,httpOptions);\n  }\n  \n  AssignStudents(data): Observable<any>{\n    return this.httpClient.post(this.apiEndPoint+'Admin/AssignStudents',data,httpOptions);\n  }\n}\n\n","import { Component, OnInit, Input, EventEmitter, Output  } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as CryptoJs from 'crypto-js';\nimport { CustomerAccountsModel } from '../Models/CommonModels'\nimport { CommonServiceService } from '../common-service.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  signUpResponse: any ;\n  showSpinner : boolean =true;\n  invalidCred: boolean = false;\n  logInBtnVisible = true;\n\n  formLogin: FormGroup = new FormGroup ({\n    email: new FormControl('', [Validators.required]),\n    password: new FormControl('', [Validators.required])\n  })\n\n\n  constructor(private commonServiceService: CommonServiceService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  login(){\n    if(this.formLogin.valid) {\n      let EmailId = this.formLogin.value.email;\n      let pwd = this.formLogin.value.password;\n      this.logInBtnVisible = false;\n      this.commonServiceService.logIn(EmailId,pwd).subscribe(data=>{\n        if(data) {\n          localStorage.setItem('userSession', JSON.stringify(data));\n          this.commonServiceService.isVisibleSource.next(true);\n          if(data.roleId == 1) {\n            this.router.navigate(['/adminDashBoard']);\n          }else if(data.roleId == 2) {\n            this.router.navigate(['/studentDashBoard']);\n          }\n        } else {\n          this.invalidCred = true;\n          this.logInBtnVisible = true;\n        }\n      });\n\n    }\n  }\n}\n","<mat-card>\n    <mat-card-title>Login</mat-card-title>\n        <form [formGroup]=\"formLogin\" (ngSubmit)=\"login()\">\n            <p>\n                <mat-form-field>\n                    <input type=\"text\" matInput placeholder=\"Email\" formControlName=\"email\" required>\n                    <mat-error *ngIf=\"formLogin.get('email').hasError('required')\">Please Enter email</mat-error>\n                </mat-form-field>\n            </p>\n            <p>\n                <mat-form-field>\n                    <input type=\"password\" matInput placeholder=\"Password\" formControlName=\"password\" required>\n                    <mat-error *ngIf=\"formLogin.get('password').hasError('required')\">Please Enter password</mat-error>\n                </mat-form-field>\n            </p>\n            <mat-error *ngIf=\"invalidCred\">Invalid Credentials</mat-error>\n            \n            <div class=\"button\" style=\"display: flex; justify-content: flex-end;\">\n                <a routerLink=\"/signUp\" routerLinkActive=\"active\" class=\"btnsignUp\">SignUp</a>\n                <button mat-raised-button color=\"primary\" type=\"submit\" class=\"btnLogIn\" [disabled]=\"!logInBtnVisible\">Login</button>\n              </div>\n        </form>\n</mat-card>\n","import { Component, OnInit, Input, EventEmitter, Output  } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { CommonServiceService } from '../common-service.service';\nimport { Router } from '@angular/router';\nimport { CustomerAccountsModel } from '../Models/CommonModels';\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n  \n  CustomerAccountsSignUp;\n  roleId: number = 2 ;\n  emailExist = false;\n  signUpbtn = true;\n  mobNumberPattern = \"^((\\\\+91-?)|0)?[0-9]{10}$\"; \n\n  formSignUp: FormGroup = new FormGroup ({\n    firstName: new FormControl('', [Validators.required]),\n    lastName: new FormControl('', [Validators.required]),\n    email: new FormControl('', [Validators.required, , Validators.email]),\n    pwd: new FormControl('', [Validators.required]),\n    roleId: new FormControl(''),\n    number: new FormControl('', [Validators.required, Validators.pattern(this.mobNumberPattern)]),\n  })\n  constructor(private commonServiceService: CommonServiceService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n  signUp(){\n    if(this.formSignUp.valid) {\n      this.signUpbtn = false;\n      let CustomerAccounts: CustomerAccountsModel = {\n        CustId : 0,\n      FirstName : this.formSignUp.value.firstName,\n      LastName : this.formSignUp.value.lastName,\n      EmailId : this.formSignUp.value.email,\n      Pwd : this.formSignUp.value.pwd,\n      RoleId : this.formSignUp.value.roleId,\n      Role : (this.formSignUp.value.roleId == 1 ? 'admin' : 'student'),\n      Phone : this.formSignUp.value.number\n      }\n      this.CustomerAccountsSignUp = CustomerAccounts;\n      this.commonServiceService.signUpUser(this.CustomerAccountsSignUp).subscribe(data => {\n        if(data == 1) {\n          // alert('SignUp Success');\n          this.router.navigate(['']);\n        }\n         else if(data == 2) {\n          this.emailExist = true;\n          this.signUpbtn = true;\n        }\n      });\n      \n    }\n  }\n}\n","<mat-card>\n    <mat-card-title>Sign Up</mat-card-title>\n    <form [formGroup] = \"formSignUp\" (ngSubmit) = \"signUp()\">\n        <p>\n            <mat-form-field>\n                <input type=\"text\" matInput placeholder=\"First Name\" formControlName=\"firstName\" required>\n                <mat-error *ngIf=\"formSignUp.get('firstName').hasError('required')\">Please Enter First Name</mat-error>\n            </mat-form-field>\n        </p>\n        <p>\n            <mat-form-field>\n                <input type =\"text\" matInput placeholder=\"Last Name\" formControlName=\"lastName\" required>\n                <mat-error *ngIf=\"formSignUp.get('lastName').hasError('required')\">Please Enter Last Name</mat-error>\n            </mat-form-field>\n        </p>\n        <p>\n            <mat-form-field>\n                <input type =\"email\" matInput placeholder=\"Email\" formControlName=\"email\" required>\n                <mat-error *ngIf=\"formSignUp.get('email').hasError('required')\">Please Enter Email</mat-error>\n            </mat-form-field>\n            <mat-error *ngIf=\"emailExist\">Email Exists</mat-error>\n        </p>\n        <p>\n            <mat-form-field>\n                <input type =\"number\" matInput placeholder=\"Phone\" formControlName=\"number\" required>\n                <mat-error *ngIf=\"formSignUp.get('number').hasError('required')\">Please Enter Mobile Number</mat-error>\n                <mat-error *ngIf=\"formSignUp.get('number').hasError('pattern')\">Please Enter Valid Number</mat-error>\n            </mat-form-field>\n        </p>\n        <p>\n           <mat-form-field>\n               <input type =\"password\" matInput placeholder=\"Password\" formControlName=\"pwd\" required>\n               <mat-error *ngIf=\"formSignUp.get('pwd').hasError('required')\">Please Enter Password</mat-error>\n           </mat-form-field>\n       </p>\n       <div class=\"form-group\">\n           <mat-radio-group aria-label=\"Select an option\" [(ngModel)]=\"roleId\" formControlName=\"roleId\">\n             <mat-radio-button  [value]=\"1\" style=\"padding-right: 15px;\">Admin</mat-radio-button>\n             <mat-radio-button [value]=\"2\">Student</mat-radio-button>\n           </mat-radio-group>\n         </div>\n       <div class=\"button\" style=\"display: flex; justify-content: flex-end;\">\n           <a routerLink=\"\" routerLinkActive=\"active\" class=\"btnLogin\">Login</a>\n           <button mat-raised-button color=\"primary\" type=\"submit\" class=\"btnSignUp\" [disabled]=\"!signUpbtn\">SignUp</button>\n         </div>\n    </form>\n</mat-card>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-spinner',\n  templateUrl: './spinner.component.html',\n  styleUrls: ['./spinner.component.css']\n})\nexport class SpinnerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-spinner></mat-spinner>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CommonServiceService } from '../common-service.service';\n\n@Component({\n  selector: 'app-student-dashboard',\n  templateUrl: './student-dashboard.component.html',\n  styleUrls: ['./student-dashboard.component.css']\n})\nexport class StudentDashboardComponent implements OnInit {\n  assignedTests: any;\n  userSession: any;\n  displayedColumns: string[] = ['testId', 'testName', 'noOfQuestions', 'duration', 'passPercentage', 'attempted', 'percentage', 'takeTest'];\n  constructor(private commonServiceService: CommonServiceService, private route: ActivatedRoute, private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.commonServiceService.getUserSession() != null) {\n      this.userSession = JSON.parse(localStorage.getItem('userSession'));\n      this.getTestDetails();\n    } else {\n      this.router.navigate(['']);\n    }\n  }\n\n  getTestDetails() {\n    this.commonServiceService.GetAllUserTests(this.userSession.custId).subscribe(res => {\n      if (res) {\n        this.assignedTests = res;\n      }\n    });\n  }\n\n  takeTest(event) {\n    this.router.navigate(['/testComponentComponent'], { queryParams: { TestId: event.testId, TestName: event.testName, duration: event.duration } });\n  }\n\n\n}","<div style=\"margin-top: 3%;\">\n    <table *ngIf=\"assignedTests.length > 0  else noTestBlock\" mat-table [dataSource]=\"assignedTests\" class=\"mat-elevation-z8\">\n\n        <!--- Note that these columns can be defined in any order.\n        The actual rendered columns are set as a property on the row definition\" -->\n\n        <!-- S.no Column -->\n        <ng-container matColumnDef=\"testId\">\n            <th mat-header-cell *matHeaderCellDef> S.no </th>\n            <td mat-cell *matCellDef=\"let element; let i = index;\"> {{i+1}} </td>\n        </ng-container>\n\n        <!-- Test Name Column -->\n        <ng-container matColumnDef=\"testName\">\n            <th mat-header-cell *matHeaderCellDef> Test Name </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.testName}} </td>\n        </ng-container>\n\n        <!-- No Of Questions Column -->\n        <ng-container matColumnDef=\"noOfQuestions\">\n            <th mat-header-cell *matHeaderCellDef> No Of Questions </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.noOfQuestions}} </td>\n        </ng-container>\n\n        <!-- Duration Column -->\n        <ng-container matColumnDef=\"duration\">\n            <th mat-header-cell *matHeaderCellDef> Duration </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.duration}} </td>\n        </ng-container>\n\n        <!-- Pass Percentage Column -->\n        <ng-container matColumnDef=\"passPercentage\">\n            <th mat-header-cell *matHeaderCellDef> Pass Percentage </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.passPercentage}} </td>\n        </ng-container>\n\n        <!-- Attempted Column -->\n        <ng-container matColumnDef=\"attempted\">\n            <th mat-header-cell *matHeaderCellDef> Attempted </th>\n            <td mat-cell *matCellDef=\"let element\"> {{(element.attempted === 1)? 'Yes' : 'No'}} </td>\n        </ng-container>\n\n        <!-- Percentage Column -->\n        <ng-container matColumnDef=\"percentage\">\n            <th mat-header-cell *matHeaderCellDef> Percentage </th>\n            <td mat-cell *matCellDef=\"let element\"> {{((element.percentage === 0) && (element.attempted === 0))? '-' : element.percentage}} </td>\n        </ng-container>\n\n        <!-- Take Test Column -->\n        <ng-container matColumnDef=\"takeTest\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td mat-cell *matCellDef=\"let element\"><button mat-raised-button color=\"primary\" [disabled]=\"(element.attempted === 1)\" (click)=\"takeTest(element)\">Take Test</button></td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n    <ng-template #noTestBlock>\n        <div class=\"noTestCLS\">\n            <h2>No Tests Assigned</h2>\n        </div>\n    </ng-template>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CommonServiceService } from 'src/app/common-service.service';\nimport { AddQuestions, selectedListModel, TestChoiceModel } from 'src/app/Models/CommonModels';\n\n@Component({\n  selector: 'app-test-component',\n  templateUrl: './test-component.component.html',\n  styleUrls: ['./test-component.component.css']\n})\nexport class TestComponentComponent implements OnInit {\n  TestId: number;\n  TestName: any;\n  Duration: number;\n  interval;\n  testTimeLeft;\n  testPapers: any;\n  selectedAnsers: any = [];\n  nullItem: any;\n  finalChoices: any;\n  testContent = true;\n  submitDisable = false;\n\n  constructor(private commonServiceService: CommonServiceService, private route: ActivatedRoute, private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.commonServiceService.getUserSession() != null) {\n      this.route.queryParams.subscribe(queryParams => {\n        this.TestId = Number(queryParams['TestId']);\n        this.TestName = queryParams['TestName'];\n        this.Duration = Number(queryParams['duration']);\n      });\n      this.getTestQuestions();\n      this.startTimer(this.Duration * 60)\n    } else {\n      this.router.navigate(['']);\n    }\n  }\n\n  getTestQuestions() {\n    this.commonServiceService.GetTestQuestions(this.TestId).subscribe(data => {\n      if (data) {\n        this.testPapers = data;\n        if (this.testPapers.length == 0) {\n          this.testContent = false;\n        }\n      }\n    });\n  }\n\n  startTimer(timeLeft) {\n    this.interval = setInterval(() => {\n      if (timeLeft > 0) {\n        timeLeft--;\n        this.testTimeLeft = this.getTimeInTimer(timeLeft);\n      } else {\n        this.testSubmit();\n      }\n    }, 1000)\n  }\n\n  getTimeInTimer(d) {\n    d = Number(d);\n    var h = Math.floor(d / 3600);\n    var m = Math.floor(d % 3600 / 60);\n    var s = Math.floor(d % 3600 % 60);\n\n    var hDisplay = h > 0 ? h + (h == 1 ? \" hour, \" : \" hours, \") : \"\";\n    var mDisplay = m > 0 ? m + (m == 1 ? \" minute, \" : \" minutes, \") : \"\";\n    var sDisplay = s > 0 ? s + (s == 1 ? \" second\" : \" seconds\") : \"\";\n    return hDisplay + mDisplay + sDisplay;\n  }\n\n  answerClick(choiceObj) {\n    if (this.selectedAnsers.length > 0) {\n      if (this.selectedAnsers.filter((item) => item.questionId === choiceObj.questionId).length > 0) {\n        const index = this.selectedAnsers.indexOf(choiceObj);\n        this.selectedAnsers.splice(index, 1);\n      }\n    }\n    this.selectedAnsers.push(choiceObj);\n  }\n\n  testSubmit() {\n    this.submitDisable = true;\n    if (this.selectedAnsers.length == 0) {\n      this.nullItem = this.testPapers[0].choices[0];\n      this.nullItem.choiceAnswer = '';\n      this.nullItem.choiceId = 0;\n      this.selectedAnsers.push(this.nullItem);\n    }\n\n    let CustId = JSON.parse(localStorage.getItem('userSession')).custId;\n    let finalChoices: TestChoiceModel = {\n      custId: CustId,\n      testId: this.TestId,\n      choices: this.selectedAnsers\n    }\n    this.commonServiceService.GenerateTestResult(finalChoices).subscribe(data => {\n      this.router.navigate(['/studentDashBoard']);\n      if(data != 1) {\n        this.submitDisable = false\n      }\n    });\n  }\n}\n","<div *ngIf=\"testContent else noTestBlock\">\n    <div style=\"display: flex; justify-content: flex-end;\">\n        <p style=\"font-size: 20px; font-weight: bold;\">Time Left: {{testTimeLeft}}</p>\n    </div>\n    <br/>\n    <div *ngFor=\"let question of testPapers index as i\">\n        <p style=\"margin-left: 10%;\">{{i+1}}. {{question.question}}</p>\n        <div>\n            <mat-radio-group>\n                <div *ngFor=\"let choice of question.choices\">\n                    <mat-radio-button style=\"width: 100%; margin-left: 13%;\" class=\"example-radio-button\" (change)=\"answerClick(choice)\" [value]=\"choice\">\n                        <p>{{choice.choiceAnswer}}</p>\n                    </mat-radio-button>\n                </div>\n            </mat-radio-group>\n        </div>\n        <br/>\n    </div>\n    <div class=\"button\" style=\"display: flex; justify-content: flex-end;\">\n        <button mat-raised-button color=\"primary\" class=\"btnSubmit\" (click)=\"testSubmit()\" [disabled]=\"submitDisable\">Submit</button>\n    </div>\n</div>\n<ng-template #noTestBlock>\n    <div class=\"noTestCLS\">\n        <h2>No Questions Assigned</h2>\n    </div>\n    <div class=\"btnBack\"><button mat-raised-button color=\"primary\" routerLink=\"/studentDashBoard\" routerLinkActive=\"active\">Back</button></div>\n</ng-template>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  ApiPreLik: 'https://localhost:44355/'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}